server {
    listen 443 ssl;
    server_name wordpress.docker.com www.wordpress.docker.com;

    ssl_certificate /etc/nginx/certs/wordpress.docker.com/cert.pem;
    ssl_certificate_key /etc/nginx/certs/wordpress.docker.com/key.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers 'TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384';
    ssl_prefer_server_ciphers on;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;

    root /var/www/html;
    index index.php index.html index.htm;

    location / {
        try_files $uri $uri/ /index.php?$args;
    }

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass wordpress:9000;  # Asegúrate de que 'wordpress' sea el nombre correcto del contenedor PHP-FPM y esté escuchando en el puerto 9000
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include fastcgi_params;
    }
}

# Bloque para manejar el dominio kibana.com
server {
    listen 443  ssl;
    server_name kibana.docker.com www.kibana.docker.com;
    ssl_certificate /etc/nginx/certs/kibana.docker.com/cert.pem;
    ssl_certificate_key /etc/nginx/certs/kibana.docker.com/key.pem;

    ssl_protocols TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        set $upstream_kibana kibana:5601;
        proxy_pass http://$upstream_kibana;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;  # Timeout para conexión con Kibana
        proxy_read_timeout 10s;   # Timeout para leer respuesta
        proxy_send_timeout 10s;   # Timeout para enviar datos

        proxy_intercept_errors on;

        error_page 502 = @fallback;
    }

   location @fallback {
        return 200 "Kibana no esta disponible. Por favor, intenta mas tarde.";
        add_header Content-Type text/plain;
    }
}

# Bloque para manejar el dominio kibana.com
server {
    listen 443  ssl;
    server_name grafana.docker.com www.grafana.docker.com;
    ssl_certificate /etc/nginx/certs/grafana.docker.com/cert.pem;
    ssl_certificate_key /etc/nginx/certs/grafana.docker.com/key.pem;

    ssl_protocols TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        set $upstream_grafana grafana:3000;

        proxy_pass http://$upstream_grafana;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_intercept_errors on;

        error_page 502 = @fallback;
    }
   location @fallback {
        return 200 "Grafana no esta disponible. Por favor, intenta mas tarde.";
        add_header Content-Type text/plain;
    }
}

server {
    listen 443  ssl;
    server_name prometheus.docker.com www.prometheus.docker.com;
    ssl_certificate /etc/nginx/certs/prometheus.docker.com/cert.pem;
    ssl_certificate_key /etc/nginx/certs/prometheus.docker.com/key.pem;

    ssl_protocols TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location / {
        set $upstream_prometheus prometheus:9090;

        proxy_pass http://$upstream_prometheus;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_intercept_errors on;

        error_page 502 = @fallback;
    }
   location @fallback {
        return 200 "Prometheus no esta disponible. Por favor, intenta mas tarde.";
        add_header Content-Type text/plain;
    }
}
server {
    listen 443  ssl;
    server_name elasticsearch.docker.com www.elasticsearch.docker.com;
    ssl_certificate /etc/nginx/certs/elasticsearch.docker.com/cert.pem;
    ssl_certificate_key /etc/nginx/certs/elasticsearch.docker.com/key.pem;

    ssl_protocols TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;

    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;


    location / {
        set $upstream_elasticsearch elasticsearch:9200;

        proxy_pass http://$upstream_elasticsearch;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_intercept_errors on;

        error_page 502 = @fallback;
    }
   location @fallback {
        return 200 "Elasticsearch no esta disponible. Por favor, intenta mas tarde.";
        add_header Content-Type text/plain;
    }
}